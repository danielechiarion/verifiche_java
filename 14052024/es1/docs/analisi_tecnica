Per realizzare il software, sono stati utilizzati alcuni package e delle classi all'interno, che verranno di seguito descritti.

=== PACKAGE UTILITY ===
*** Classe tools
La classe tools contiene i metodi più utilizzati per il software, ovvero:
- ClrScr() per la pulizia dello schermo
- Wait(int sec) genera un attesa di un certo numero di secondi, forniti da parametro
- menu(String[] opzioni, Scanner scanner) prende in input le opzioni e lo scanner, per poi restituire la scelta effettuata. All'interno sono presenti anche dei controlli sull'intervallo.
- messaggioErrore(int value) metodo che visualizza in output i vari messaggi di errore, generati in base al numero inserito come parametro
- safeIntInput(String testoInput, Scanner scanner) metodo che consente di controllare il dominio nell'inserimento di un dato intero. Viene richiesto, però, il testo della richiesta e lo scanner per prendere in input i dati.

*** Classe jsonFile
La classe contiene i metodi più utilizzati per la gestione di un file JSON. 
- readDataJSON(String path) in base all'indirizzo del file, legge il contenuto e ne restituisce un JSONObject
- rewriteFileJSON(String path, Object object) metodo che riscrive il file seguendo il percorso inserito come parametro
- createNewFile(String path) metodo che permette di creare un nuovo file partendo dall'indirizzo inserito

*** Classe dataOra
Classe che permette di gestire data e ora creando degli oggetti ed effettuando dei controlli. 
Un oggetto è costituito dai seguenti attributi interi:
- anno
- mese
- giorno
- data
- ora 
e dai seguenti metodi riferiti agli oggetti:
- get()/set() per i vari attributi
- dataOra() metodo costruttore che richiede in inserimento tutti gli attributi precedentemente elencati
- isBisestile() metodo che controlla se l'anno è bisestie. Ritorna TRUE se lo è, FALSE se non lo è. 
- isDataCorretta() controlla se la data è corretta controllando il giorno associato al mese e il mese. Ritorna TRUE se la data è corretta, FALSE se non lo è.
- isOraCorretta() controlla se l'ora è corretta controllando l'ora e i minuti inseriti. Ritorna TRUE se l'ora è corretta, FALSE se non lo è.
- visualizza() permette di restituire una stringa formatta per visualizzare data e ora completa
- compareTo(dataOra anotherdata) permette di confrontare data e ora in modo da restiuire 0 se le due date sono uguali, <0 se la prima data viene prima, >0 se la prima data viene dopo.
- toJSON() metodo che converte la data e ora in un JSONObject per agevolare il salvataggio su un file JSON. 
e dai seguenti metodi statici:
- parseJSON(JSONObject object) metodo che prende l'oggetto JSON e lo riconverte in un oggetto della classe dataOra, ritornando l'oggetto creato. 
- erroreDataOra(int num) metodo che visualizza l'errore associato alla data in base al valore inserito

*** Classe array
Classe che gestisce gli array. 
La classe è costituita dai seguenti metodi:
- aggiungiPosArray(Contatto[] array) metodo che aggiunge una posizione all'array copiando il contenuto già esistente.
- rimuoviPosArray(Contatto[] array, int pos) metodo che rimuove la posizione dell'array e copia tutti gli altri elementi.
- concatenaArray(int[] array1, int[] array2) metodo che concatena due array restituendone uno frutto dell'unione del primo e del secondo.
- posOccupateArray(Object[] array) metodo che conta quante posizione dell'array sono effettivamente occupate. 

=== PACKAGE GESTIONERUBRICA ===
*** Classe Contatto
Classe che gestisce un contatto e vari metodi associati. 
L'oggetto è costituito dai seguenti attributi:
- nome (stringa)
- cognome (stringa)
- telefono (stringa)
- tipo (enumeratore)
- infoExtra (appartente alla classe AltreInfo)
e dai seguenti metodi riferiti agli oggetti:
- get()/set() dei vari attributi
- 

*** Classe tipoContratto
La classe tipoContratto contiene semplicemente l'enumeratore con i vari tipi di contratto, ovvero:
- abitazione
- cellulare
- aziendale
- undefined (assegnata di deafult)

*** Classe AltreInfo
Classe che gestisce alcune informazioni aggiuntive, con alcuni metodi da gestire. 
La classe è costituita dai seguenti attributi di tipo stringa:
- nickname
- secondoTel
- email
e dai seguenti metodi associati agli oggetti:
- get()/set() dei vari attributi
- AltreInfo() metodo costruttore dove si richiede di inserire tutti gli attributi definiti nella classe
- visualizza() metodo che visualizza le informazioni secondarie, solo se sono state inserite
- toJSON() che converte l'oggetto in un JSONObject, pronto per il salvataggio in un file JSON
e dai seguenti metodi statici:
- parseJSON(JSONObject object) metodo che prende l'oggetto JSON e ritorna un oggetto altreInfoù

*** Classe Chiamata
La classe gestisce il comportamento e le modifiche associate ad una chiamata. 
La classe è costituita dai seguenti attributi:
- contatto (oggetto della classe Contatto)
- dataOra (oggetto della classe dataOra)
- durata (intero)
e dai seguenti metodi associati agli oggetti
- get()/set() riferiti ai vari attributi
- Chiamata() metodo costruttore che richiede l'inserimento di tutti i dati necessari al completamento di tutti gli attributi
- visualizza() metodo che restituisce i dati necessari alla chiamata in formato stringa (data e ora, nome, cognome, numero di telefono, durata della chiamata)
- compareTo(Chiamata anotherChiamate) metodo che consente di comparare una chiamata con un altra confrontando data, ora e durata. Restituirà un valore <0 se la prima stringa viene prima o è uguale o un valore>0 se la prima stringa viene dopo. Per la gestione delle chiamate, non è contemplato che le chiamate siano uguali.
- toJSON() metodo che converte l'oggetto chiamata in un oggetto JSON
e dai seguenti metodi statici:
- parseJSON(JSONObject object) metodo che prende in input un oggetto JSON e lo riconverte in un oggetto Chiamata
